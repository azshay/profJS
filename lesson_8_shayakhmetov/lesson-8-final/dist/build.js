(()=>{"use strict";const t="http://localhost:3000";new Vue({el:"#app",data:{goods:[],filteredGoods:[],searchLine:"",isVisibleCart:!1,cartList:[]},components:{goodsList:{name:"goods-list",props:["goods","func","calcprice"],components:{goodsItem:{name:"goods-item",props:["fGood"],methods:{async addToCart(){await fetch("http://localhost:3000/addToCart",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(this.fGood)}),await this.$emit("getCart"),this.$emit("calculateCartPrice")}},template:'<div class="goods-item">\n                       <h3>{{fGood.product_name}}</h3>\n                       <p>{{fGood.price}} ₽</p>\n                       <button class="button-item button-buy" @click=addToCart>\n                          Купить\n                       </button>\n                 </div>'}},template:'<div class="goods-list">\n                   <div class="goods-empty" style="display: none">\n                        Нет данных\n                   </div>\n                   <goods-item v-for="item in goods" :fGood="item" @getCart=\'func\' @calculateCartPrice=\'calcprice\'></goods-item>\n                </div>'},cartList:{name:"cart-list",props:["goods","func","calcprice"],components:{cartItem:{name:"cart-item",props:["fGood"],methods:{async removeFromCart(){await fetch("http://localhost:3000/deleteFromCart",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(this.fGood)}),await this.$emit("getCart"),this.$emit("calculateCartPrice")}},template:'<div class="cart__item">\n                        <h3 class="item__title">{{fGood.product_name}}</h3>\n                        <p class="item__price">{{fGood.price}} рублей</p>\n                        <button class="button-item button__delete" @click=removeFromCart>Удалить</button>\n                    </div>'}},template:'<div class="cart">\n                  <cart-item v-for="item in goods" :fGood="item" @getCart=\'func\' @calculateCartPrice=\'calcprice\'></cart-item>\n                  <button class="cart-button button__bottom">\n                       Перейти к оплате\n                  </button>\n                  <div class="total__price">\n                       <h4>Цена:</h4>\n                       <p class="price__total">0 руб.</p>\n                  </div>\n                  <button\n                       class="cart-button button__clear button__bottom"\n                  >\n                       Очистить корзину\n                  </button>\n               </div>'},search:{name:"search",props:["searchLine","whyonlylowercase"],components:{searchButton:{name:"search-button",props:["searchLine","whyonlylowercase"],template:'\n      <button\n              class="search-button"\n              type="button"\n              @click="whyonlylowercase()"\n      >\n          Искать\n      </button>\n  '}},template:'\n       <div>\n          <input\n             type="text"\n             class="goods-search"\n             v-bind:value="searchLine"\n             v-on:input="$emit(\'input\', $event.target.value)"\n          />\n          <search-button :whyonlylowercase="whyonlylowercase"></search-button>\n       </div>\n  '}},methods:{async getProducts(){const e=await fetch(`${t}/catalogData`);if(e.ok){const t=await e.json();this.goods=t,this.filteredGoods=t}else alert("Ошибка при соединении с сервером")},async getCart(){const e=await fetch(`${t}/cartData`);if(e.ok){const t=await e.json();this.cartList=t,this.calculateCartPrice()}else alert("Ошибка при соединении с сервером")},getSearchedList(){document.querySelector(".goods-empty").style.display="none";const t=new RegExp(this.searchLine,"i");this.filteredGoods=this.goods.filter((e=>t.test(e.product_name))),0===this.filteredGoods.length&&(document.querySelector(".goods-empty").style.display="block")},changeCartVisibility(){this.isVisibleCart?(document.querySelector(".cart").style.display="none",this.isVisibleCart=!1):(document.querySelector(".cart").style.display="block",this.isVisibleCart=!0)},calculateCartPrice(){const t=document.querySelector(".price__total");let e=0;this.cartList.forEach((t=>{e+=t.price})),t.innerHTML=e+" руб."}},async mounted(){await this.getProducts(),await this.getCart()}})})();